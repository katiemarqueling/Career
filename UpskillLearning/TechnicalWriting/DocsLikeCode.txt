Docs Like Code Notes

- Chapter 1: introducing docs-like-code
  - user-centered docs that are technically accurate
  - currently developed by using Agile techniques
  - purpose is to aid in the effective use of technology
  - treat docs like code:
    - store the doc source files in a version control system
    - build the doc artifacts automatically
      ensure that a trusted set of reviewers meticulously review the documents
    - publish the artifacts without much human intervention
  - JavaDoc, REST API, Django
  - goals of docs like code:
    - promote collaboration: GitHub social network, continuous integration, 
      automated testing, and incremental improvement
    - get long-tail contributions: rise of the niche, docs that are constructed 
      from obscure knowledge gathering and hard-to-find information, specialist 
      in the topic to help you understand, don't belittle a complex software product
      that only a few people understand deeply 
    - track doc bugs like code bugs: tracked incremental improvement
    - get better reviews: reviewers can see what was changed before approving, 
      notifications that something was changed
    - make beautiful docs: clean, useful, well organized docs, Sphinx, Bootstrap
    - use developer tools and workflows: published automatically, can focus on content
      not build, write code to format for you, do not guard writing knowledge or 
      tools in order to protect jobs
    - get value from cost effective tools: already have GitHub, don't need specialized equipment
- Chapter 2: plan for docs-like-code
  - source file organization (separate repo, multiple repos, or with code)
    - users: make sure your user needs what you are actually creating
    - contributors: create a separate repo if developer is confused by docs, more accurate = same repo
    - reviewers: what collaborators are the best to review and what is their preference
    - content size: do reviewers need look at everything or just technical parts (separate repos)
    - deployed docs: is everything being released together
    - translated docs: if freeze for translation is needed, split code and docs
  - inclusion mechanisms
    - enales authors to insert a reference to other content and pull tha content into
      the location at build time
    - reuses smaller pieces of information
  - speciality information - REST API docs:
    - DXs can let multiple contributors work on one file at the same time
    - API complexity
      - methods: HTTP GET, PUT, POST, PATCH, DELETE
      - headers: any extra headers API
      - parameters: what query, template, and body parameters are required
      - error codes: are errors easy to understand, or do you need to document what they mean
    - API source frameworks/API description language
      - OpenAPI (Swagger): JSON, YAML
      - RESTful API: YAML
      - API Blueprint: Markdown
    - API life cycle
      - github is not a API management platform
      - also need security, parameter testing, monitoring, monetizing, visualizing, webhooks, 
        terms of service, discovery, and the voice for the API
      - API life cycle: Subway Map API by Kin Lane
    - API user docs
      - API docs make API findable and usable
      - need auto-generated reference docs that describe architecture and why it exists, along
        with code samples and tutorials
    - API guidelines
      - GitHub for REST APIs: document expectations for source file markup, contribution rules,
        completeness definitions, review guidelines, and quality indicators
- Chapter 3: optimize docs-like code workflows
  - basic workflows
    - centralized: working in main
    - feature branch: work in separate branch
    - gitflow: work in feature branch but with specific guidelines
    - forking: work in independent fork and merge when you want to
  - the further the documents are from the code, the harder it is to keep them in sync
  - author and build content
    - choose an editor
      - use AsciiDoc, Markdown, or reStructuredTexr
      - IDE: Integrated Development Enviroment
      - emac and vi good for not having to switch to a seperate editor
    - build locally first
      - side-by-side editors
      - staging enviroment
    - choose a static site generator
      - rendering of doc in GitHub (not "raw")
  - automate builds
    - build and deployment tools
      - build: parse and render to another format (AsciiDoc to HTML, CSS, and JavaScript)
      - deploy: copy the files to the correct location on a configured server
    - CI/CD for docs
      - multiple changes can be made every day
      - dont have to build docs in local enviroments
      - work on multiple patches at once
      - publish incomplete work
    - GitHub pages
      - edit, push, and view live web pages
      - branch named gh-pages
    - programming lanugage considerations
      - Python with Sphinx
      - Ruby with Jekyll
    - additional uses of CI
      - translation
      - synchronize any shares files from one repo to a few others
  -review and test content
    - GitHub reviews
      - review patches
      - line-by-line "add single comment button"
    - link to bugs in docs patches
      - let reviewers know what bug the patch is fixing
      - "confirmed" status to approve bugs
    - meausre improvements
      - github has metrics that will help you look for areas to improve to meet certain goals (adding contributors or decreasing doc errors)
    - write down review expectations
      - Self-check
        - Do I know enough about the subject to review for accuracy?
        - Do I have the configuration in place to test the instructions?
        - Have I been reviewing for an hour already? If so, time for a break.
      - Tooling 
        - Does the document build without errors?
        - Is the output formatted as expected?
      - Organization and audience
        - Does this piece of information belong where it is placed?
        - Are the headings correct for the style guidance and overall organization?
        - Is the flow and structure logical for a reader to follow?
        - Will the audience understand the context and why this information matters to them?
      - Accuracy
        - Have you run all the commands in the doc review?
        - Are the results as expected?
        - Do the results match the version of the software that is in this deliverable?
        - Are screenshots accurate for the version?
        - Has data been properly redacted if needed for security reasons?
        - If the patch is a bug fix, does the doc addition or edit fix the recorded bug?
      - Syntax and consistency
        - Is the grammar correct?
        - Is the markup correct?
        - Is the document spell-checked and error-free?
        - Are trademarked names used properly?
        - Are preferred names used correctly (such as project name versus team name)?
        - Are acronyms spelled out at first use?
        - If a glossary is in place, are definitions of new terms available?
      - Meta information
        - Does the commit message convey the purpose of the change?
        - Are bug fixes correctly linked in the commit message?
    - gerrit reviews
      - web-based collection tool that enables teams to write code together
      - integrates closely with Git
      - configurable dashboard to review across multiple repos (status/search functions)
    - automate testing
      - voting test: block a patch from going through the gate and merging, 
        save humans the time of downloading a patch locally and running test manually
      - non-voting test: report but do not block a patch from going through the gate
    - prioritize technical reviews
      - technical acuracy is most important
      - test enviroment can test user actions as part of a review to save time
    - coach better contributors
      -collaborative writing and reviewing
      - use reviews to coach skills
    - create and fix doc Issues
      - issues then pull request to fix
      - fork larger projects
    - deliver copy edits 
      - enter line comments in a pull request
      - update the file itself and create a pull request with your changes
  - publish docs
    - define a docs version
      - https://www.writethedocs.org/
    - define a docs locale
      - language indicators
    - notes on translation and continuous integration
      - english is not the only first language for technical documents
    - docs source version control
      - tags, branches, or releases to provide version control?
      - complexity increases as you add requirements
    - releases for documentation sites
      - pre-plan relese of web-based documentation sites in phases
      - staging areas
    - archives contain all files - repos do not automate this
- Chapter 4: tutorial
  - 
    
